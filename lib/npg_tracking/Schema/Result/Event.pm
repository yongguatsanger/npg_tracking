use utf8;
package npg_tracking::Schema::Result::Event;

# Created by DBIx::Class::Schema::Loader
# DO NOT MODIFY THE FIRST PART OF THIS FILE

=head1 NAME

npg_tracking::Schema::Result::Event

=cut

use strict;
use warnings;

use Moose;
use MooseX::NonMoose;
use MooseX::MarkAsMethods autoclean => 1;
extends 'DBIx::Class::Core';

=head1 COMPONENTS LOADED

=over 4

=item * L<DBIx::Class::InflateColumn::DateTime>

=back

=cut

__PACKAGE__->load_components("InflateColumn::DateTime");

=head1 TABLE: C<event>

=cut

__PACKAGE__->table("event");

=head1 ACCESSORS

=head2 id_event

  data_type: 'bigint'
  extra: {unsigned => 1}
  is_auto_increment: 1
  is_nullable: 0

=head2 id_event_type

  data_type: 'bigint'
  default_value: 0
  extra: {unsigned => 1}
  is_foreign_key: 1
  is_nullable: 0

=head2 date

  data_type: 'datetime'
  datetime_undef_if_invalid: 1
  default_value: '0000-00-00 00:00:00'
  is_nullable: 0

=head2 description

  data_type: 'varchar'
  is_nullable: 1
  size: 1024

=head2 entity_id

  data_type: 'bigint'
  default_value: 0
  extra: {unsigned => 1}
  is_nullable: 0

the id of the entity having id_event_type.id_entity_type

=head2 id_user

  data_type: 'bigint'
  extra: {unsigned => 1}
  is_foreign_key: 1
  is_nullable: 0

=head2 notification_sent

  data_type: 'timestamp'
  datetime_undef_if_invalid: 1
  default_value: '0000-00-00 00:00:00'
  is_nullable: 0

=cut

__PACKAGE__->add_columns(
  "id_event",
  {
    data_type => "bigint",
    extra => { unsigned => 1 },
    is_auto_increment => 1,
    is_nullable => 0,
  },
  "id_event_type",
  {
    data_type => "bigint",
    default_value => 0,
    extra => { unsigned => 1 },
    is_foreign_key => 1,
    is_nullable => 0,
  },
  "date",
  {
    data_type => "datetime",
    datetime_undef_if_invalid => 1,
    default_value => "0000-00-00 00:00:00",
    is_nullable => 0,
  },
  "description",
  { data_type => "varchar", is_nullable => 1, size => 1024 },
  "entity_id",
  {
    data_type => "bigint",
    default_value => 0,
    extra => { unsigned => 1 },
    is_nullable => 0,
  },
  "id_user",
  {
    data_type => "bigint",
    extra => { unsigned => 1 },
    is_foreign_key => 1,
    is_nullable => 0,
  },
  "notification_sent",
  {
    data_type => "timestamp",
    datetime_undef_if_invalid => 1,
    default_value => "0000-00-00 00:00:00",
    is_nullable => 0,
  },
);

=head1 PRIMARY KEY

=over 4

=item * L</id_event>

=back

=cut

__PACKAGE__->set_primary_key("id_event");

=head1 RELATIONS

=head2 event_type

Type: belongs_to

Related object: L<npg_tracking::Schema::Result::EventType>

=cut

__PACKAGE__->belongs_to(
  "event_type",
  "npg_tracking::Schema::Result::EventType",
  { id_event_type => "id_event_type" },
  { is_deferrable => 1, on_delete => "NO ACTION", on_update => "NO ACTION" },
);

=head2 user

Type: belongs_to

Related object: L<npg_tracking::Schema::Result::User>

=cut

__PACKAGE__->belongs_to(
  "user",
  "npg_tracking::Schema::Result::User",
  { id_user => "id_user" },
  { is_deferrable => 1, on_delete => "NO ACTION", on_update => "NO ACTION" },
);


# Created by DBIx::Class::Schema::Loader v0.07036 @ 2014-02-28 12:00:59
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:Va2X3mrYQthvC7JygMXvSw

# Author:        david.jackson@sanger.ac.uk
# Created:       2010-04-08

use Carp;
with 'npg_tracking::Schema::Retriever';

our $VERSION = '0';

=head2 insert
  Ensure default DBIC generated events do not have a sent time, whilst
  events generated by existing clearpress model (which sends emails) get
  current time.

  The effect of this (in combination with the datetime inflation) is that
  '0000-00-00 00:00:00' gets written to the database, but undef gets
  returned.
=cut

around 'insert' => sub {
  my $orig = shift;
  my $self = shift;

  $self->id_user(0)
    unless $self->id_user();
  $self->notification_sent('0000-00-00 00:00:00')
    unless $self->notification_sent();
 
  return $self->$orig(@_);
};

=head2 entity_obj

An event is created when a new record is inserted into
one of the tables (run_annotation, run_status, etc).
Each event record links back to the original database change
via entity_id - the id of the record in a table pointed to
by the id_event_type value.

Returns a new database record that triggered this event creation.

=cut

sub entity_obj {
  my $self = shift;

  my $obj_type = $self->event_type->entity_type->description();
  $obj_type =~ s/(?: ^ | _ ) ( [a-z] )/ uc $1 /egmsx; 

  return $self->result_source->schema->resultset($obj_type)->
         find( $self->entity_id() );
}

=head2 mark_as_reported

 Marks the event as reported, ie updates notification_sent
 column to current time.

=cut
  
sub mark_as_reported {
  my $self = shift;
  if ($self->notification_sent()) {
    my $id = $self->id_event();
    croak "Event with id $id is already marked as reported";
  }
  $self->notification_sent($self->get_time_now());
  $self->update();
  return;
}

__PACKAGE__->meta->make_immutable;
1;
