#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use Try::Tiny;
use English qw(-no_match_vars);
use Getopt::Long;
use Pod::Usage;

use npg_tracking::util::config qw(get_config_staging_areas);
use npg_tracking::monitor::status;

our $VERSION = '0';

my $prefix;
my $help;
GetOptions ('prefix:s' => \$prefix,
            'help|?'   => \$help)
  or croak("Error in command line arguments\n");

pod2usage(1) if $help;

if (!$prefix) {
  $prefix = get_config_staging_areas()->{'prefix'} ||
    croak 'Failed to get staging area path prefix from config file';
  $prefix =~ s{\A/nfs/}{/export/}smx; # Using /nfs might be OK since
  # we believe that on a staging area host it's a bind mount to /export.
  # However, /nfs staging area paths are visible from other hosts.
  # If in future we want to try /nfs path, we will have to ensure that
  # the path and staging host name match.
  $prefix .= q[*]; 
}

my $pattern = $prefix.q[/{IL,HS}*];
my @dirs = grep { -d $_ } glob $pattern;
if (!@dirs) {
  croak "Cannot find $pattern";
}
if (scalar @dirs > 1) {
  croak "Too many directories with pattern $pattern:\n" . join qq[\n], @dirs;
}

my $dir = $dirs[0];

my $transit     = "$dir/analysis";
my $destination = "$dir/outgoing";
warn "Discovered $dir, starting monitoring $transit and $destination\n";

my $fs_type = npg_tracking::monitor::status->staging_fs_type($dir);
warn "File system type is '$fs_type'\n";

my $monitor = npg_tracking::monitor::status->new(
                transit        => $transit,
                destination    => $destination,
                enable_inotify => $fs_type eq 'lustre' ? 0 : 1
                                                );

$SIG{'INT'}  = 'interrupt_handler';
$SIG{'TERM'} = 'interrupt_handler';

try {
  $monitor->watch(); # This method never returns.
} catch {
  carp "Error in status watch : $_\n\n Cancelling watch...";
  $monitor->cancel_watch;
  exit 1;
};

exit 0;

sub interrupt_handler {
  warn "Handling signal '$OS_ERROR'\n";
  try { $monitor->cancel_watch };
  exit 0;
}

1;

__END__

=head1 NAME

npg_status_watcher

=head1 USAGE

  npg_status_watcher
  npg_status_watcher --prefix /export/sf51
  npg_status_watcher --help

=head1 DESCRIPTION

  Utility for discovering in real time files containing the description of
  analysis pipeline statuses and saving the statuses to the database. On
  start, finds all existing status files and saves them to the database.
  
  It's the responsibility of the database ORM layer to maintain the integrity
  of the status tables, for example, ensuring that duplicate statuses are
  not created.

=head1 REQUIRED ARGUMENTS

  None

=head1 OPTIONS

  --prefix
  Exact prefix preceeding /{IL,HS}* directories. If given, a lookup in the
  configuration file will be skipped. Example value: /export/sf51

  --help

=head1 DIAGNOSTICS

=head1 CONFIGURATION

  Based on Linux inotify http://inotify.aiken.cz/.

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item FindBin

=item lib

=item Carp

=item Try::Tiny

=item English

=item Getopt::Long

=item Pod::Usage

=item npg_tracking::util::config

=item npg_tracking::monitor::status

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Marina Gourtovaia E<lt>mg8@sanger.ac.ukE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2015 Genome Research Limited

This file is part of NPG.

NPG is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
